{"version":3,"file":"js/app.0273eab1.js","mappings":"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","sources":["webpack://stream-test/./src/App.vue","webpack://stream-test/./src/components/StreamChat.vue","webpack://stream-test/./src/components/StreamChat.vue?153d","webpack://stream-test/./src/App.vue?7ccd","webpack://stream-test/./src/main.js","webpack://stream-test/webpack/bootstrap","webpack://stream-test/webpack/runtime/chunk loaded","webpack://stream-test/webpack/runtime/define property getters","webpack://stream-test/webpack/runtime/global","webpack://stream-test/webpack/runtime/hasOwnProperty shorthand","webpack://stream-test/webpack/runtime/jsonp chunk loading","webpack://stream-test/webpack/startup"],"sourcesContent":["<template>\n  <StreamChat />\n</template>\n\n<script>\nimport StreamChat from './components/StreamChat.vue'\n\nexport default {\n  name: 'App',\n  components: {\n    StreamChat\n  }\n}\n</script>\n\n<style>\n#app {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  color: #2c3e50;\n  margin-top: 60px;\n}\n</style>\n","<!-- \n  파일: EnhancedComparisonDemo.vue \n  왼쪽: 재파싱·재렌더링 방식 / 오른쪽: streaming-markdown 방식 비교 데모\n  - 복잡한 차트, 표, 이미지 추가 버전\n-->\n<script setup>\nimport { ref, onMounted, onUnmounted } from 'vue';\nimport { marked } from 'marked'; // marked 라이브러리 사용\nimport * as smd from 'streaming-markdown'; // streaming-markdown 라이브러리 사용\n\n// 스트리밍될 콘텐츠를 저장할 ref\nconst streamingContent = ref('');\nconst rerenderElement = ref(null); // 재파싱·재렌더링 방식용\nconst streamingElement = ref(null); // streaming-markdown 방식용\nconst isStreaming = ref(false);\nconst progress = ref(0);\n\n// 스트리밍 인터벌 레퍼런스\nlet streamInterval = null;\n\n// streaming-markdown 파서 인스턴스\nlet parser = null;\n\n// LLM 응답을 시뮬레이션하기 위한 마크다운 문자열\nconst simulatedLLMResponse= `# 마크다운 렌더링 방식 비교 데모\n\n 이것은 **재파싱,재렌더링 방식**과 **streaming-markdown방식**을 시뮬레이션하는 예제입니다.\n\n## 복잡한 표(Table) 렌더링 비교\n\n### 기본 표 렌더링\n\n| 방식 | 장점 | 단점 | 효율성 | 구현 난이도 |\n|------|------|------|--------|------------|\n| 재파싱·재렌더링 | 구현 간단 | 성능 저하, 깜빡임 | 낮음 | 쉬움 |\n| streaming-markdown | 부드러운 렌더링, 효율적 | 구현 복잡 | 높음 | 어려움 |\n| 하이브리드 | 균형잡힌 성능 | 추가 최적화 필요 | 중간 | 중간 |\n| 사용자 정의 렌더러 | 유연성 높음 | 개발 비용 높음 | 가변적 | 매우 어려움 |\n\n### 복잡한 중첩 표 렌더링\n\n| 상위 카테고리 | 하위 카테고리 | 세부 항목 | 설명 |\n|--------------|--------------|-----------|------|\n| 프론트엔드 | 렌더링 엔진 | **DOM 기반** | 웹 브라우저의 기본 렌더링 방식 |\n|  |  | **가상 DOM** | React, Vue 등에서 사용하는 최적화된 렌더링 |\n|  | UI 프레임워크 | *React* | 컴포넌트 기반의 선언적 UI 라이브러리 |\n|  |  | *Vue* | 점진적으로 적용 가능한 프론트엔드 프레임워크 |\n|  |  | *Angular* | 완전한 프론트엔드 솔루션 |\n| 백엔드 | 서버 | **Node.js** | 자바스크립트 런타임 환경 |\n|  |  | **Django** | 파이썬 기반 웹 프레임워크 |\n|  | 데이터베이스 | *SQL* | 관계형 데이터베이스 |\n|  |  | *NoSQL* | 비관계형 데이터베이스 |\n\n## 이미지 렌더링 비교\n\n### 단일 이미지 렌더링\n\n이미지 렌더링 마크다운 원시코드가 나오는지 관찰해보세요:\n\n![첫 번째 테스트 이미지](https://picsum.photos/400/200)\n\n### 다중 이미지 렌더링\n\n여러 이미지가 순차적으로 나타날 때의 차이점을 관찰해보세요:\n\n![두 번째 테스트 이미지](https://picsum.photos/400/150?random=1)\n\n![세 번째 테스트 이미지](https://picsum.photos/400/180?random=2)\n\n![네 번째 테스트 이미지](https://picsum.photos/400/220?random=3)\n\n## 복잡한 차트 (ASCII 아트)\n\n### 막대 차트\n\\`\\`\\`\n재파싱·재렌더링 방식 성능    [██████████████░░░░░░░░░░] 60%\nstreaming-markdown 방식 성능 [████████████████████████] 100%\n하이브리드 방식 성능         [██████████████████░░░░░░] 80%\n사용자 정의 렌더러 성능      [███████████████████░░░░░] 85%\n\\`\\`\\`\n\n\n\n## 복잡한 중첩 리스트\n\n1. 마크다운 렌더링 기본 원리\n   - 파싱 단계\n     - 토큰화(Tokenization)\n       - 마크다운 텍스트를 개별 토큰으로 분할\n       - 각 토큰은 특정 마크다운 요소를 나타냄\n     - 구문 분석(Parsing)\n       - 토큰 간의 관계 분석\n       - AST(Abstract Syntax Tree) 구성\n   - 렌더링 단계\n     - HTML 변환\n       - AST를 HTML 요소로 변환\n     - DOM 업데이트\n       - 생성된 HTML을 DOM에 삽입\n2. 재파싱·재렌더링 방식의 문제점\n   - 성능 이슈\n     - 전체 마크다운 재파싱 필요\n     - 전체 DOM 재구성 필요\n   - 사용자 경험 저하\n     > 스크롤 위치 초기화, 포커스 손실, 깜빡임 등 사용자 경험을 해치는 요소들이 발생\n     >\n     > 특히 긴 문서에서 이러한 문제가 더욱 두드러짐\n3. streaming-markdown 방식의 장점\n   - 효율적인 렌더링\n     - 증분 파싱(Incremental Parsing)\n       1. 변경된 부분만 파싱\n       2. 부분적 DOM 업데이트\n     - 메모리 효율성\n       1. 전체 문서를 메모리에 유지할 필요 없음\n       2. 낮은 메모리 사용량\n\n\n## 매우 복잡한 중첩 표 테스트\n\n| 렌더링 단계 | 재파싱·재렌더링 방식 | streaming-markdown 방식 | 비고 |\n|------------|---------------------|------------------------|------|\n| **파싱** | 매 업데이트마다 전체 파싱 | 증분 파싱 | |\n| ^^ | 시간 복잡도: O(n) | 시간 복잡도: O(1) | n: 문서 길이 |\n| ^^ | 메모리 사용: 높음 | 메모리 사용: 낮음 | |\n| **DOM 조작** | innerHTML 교체 | 부분 업데이트 | |\n| ^^ | 기존 노드 전부 폐기 | 기존 노드 유지 | |\n| ^^ | 스크롤 위치 초기화 | 스크롤 위치 유지 | |\n| **렌더링** | 브라우저 전체 리플로우 | 최소한의 리플로우 | |\n| ^^ | 깜빡임 발생 | 부드러운 전환 | |\n| **사용자 경험** | 기본 구현 간단 | 구현 복잡 | |\n| ^^ | 긴 문서에서 성능 저하 | 문서 길이에 영향 적음 | |\n| ^^ | 입력 지연 발생 | 반응성 유지 | |\n\n## 마지막 복잡한 이미지와 테이블\n\n![다섯 번째 테스트 이미지](https://picsum.photos/600/300?random=4)\n\n\n## 마무리\n\n이제 두 가지 마크다운 렌더링 방식의 차이점이 명확하게 보이시나요? 특히 복잡한 차트, 표, 이미지를 포함하는 콘텐츠에서 streaming-markdown 방식의 장점이 두드러집니다.\n\n스트리밍 방식의 차이점은 다음과 같이 요약할 수 있습니다:\n\n1. **성능 차이**: streaming-markdown 방식은 증분 업데이트를 사용하여 훨씬 효율적\n2. **사용자 경험**: 깜빡임 없이 부드러운 렌더링 제공\n3. **리소스 사용**: 메모리와 CPU 사용량이 현저히 낮음\n4. **복잡한 콘텐츠**: 표, 코드 블록, 이미지 등 복잡한 요소에서 차이가 더욱 명확\n\n이 강화된 데모를 통해 두 방식의 차이를 명확하게 비교할 수 있을 것입니다.\n`;\n\nonMounted(() => {\n  // streaming-markdown 파서 초기화\n  initializeParser();\n  \n  // 자동으로 스트리밍 시작\n  startStreaming();\n});\n\nonUnmounted(() => {\n  // 컴포넌트가 언마운트될 때 인터벌 정리\n  if (streamInterval) {\n    clearInterval(streamInterval);\n  }\n});\n\n// 파서 초기화 함수\nfunction initializeParser() {\n  if (streamingElement.value) {\n    // streaming-markdown 사용법에 맞게 렌더러와 파서 생성\n    const renderer = smd.default_renderer(streamingElement.value);\n    parser = smd.parser(renderer);\n  }\n}\n\n// 스트리밍 시작 함수\nfunction startStreaming() {\n  // 이미 스트리밍 중이면 실행하지 않음\n  if (isStreaming.value) return;\n  \n  // 스트리밍 상태 초기화\n  isStreaming.value = true;\n  streamingContent.value = '';\n  progress.value = 0;\n  \n  // 기존 스트리밍이 있다면 중지\n  if (streamInterval) {\n    clearInterval(streamInterval);\n  }\n  \n  // 컨텐츠 영역 초기화\n  if (rerenderElement.value) {\n    rerenderElement.value.innerHTML = '';\n  }\n  \n  if (streamingElement.value) {\n    streamingElement.value.innerHTML = '';\n    \n    // 파서 재초기화\n    const renderer = smd.default_renderer(streamingElement.value);\n    parser = smd.parser(renderer);\n  }\n  \n  // 문자별로 분할하여 왼쪽에서 오른쪽으로 나타나도록 함\n  const characters = simulatedLLMResponse.split('');\n  const totalChars = characters.length;\n  let currentIndex = 0;\n  \n  streamInterval = setInterval(() => {\n    if (currentIndex < totalChars) {\n      // 현재 문자를 추가\n      const char = characters[currentIndex];\n      streamingContent.value += char;\n      \n      // 1. 재파싱·재렌더링 방식 (왼쪽)\n      if (rerenderElement.value) {\n        rerenderElement.value.innerHTML = marked.parse(streamingContent.value);\n      }\n      \n      // 2. streaming-markdown 방식 (오른쪽)\n      if (parser) {\n        smd.parser_write(parser, char);\n      }\n      \n      // 진행 상태 업데이트\n      currentIndex++;\n      progress.value = Math.floor((currentIndex / totalChars) * 100);\n    } else {\n      // 스트리밍 완료\n      clearInterval(streamInterval);\n      isStreaming.value = false;\n      \n      // streaming-markdown 파서 종료\n      if (parser) {\n        smd.parser_end(parser);\n      }\n      \n      console.log('스트리밍 완료!');\n    }\n  }, 35); \n}\n</script>\n\n\n\n\n\n\n\n\n\n\n\n\n<template>\n  <div class=\"comparison-demo\">\n    <h1>마크다운 렌더링 방식 비교 - 강화 데모</h1>\n    \n    <div class=\"explanation\">\n      <p>이 데모는 두 가지 마크다운 렌더링 방식을 비교합니다:</p>\n      <ul>\n        <li><strong style=\"color:#d32f2f\">재파싱·재렌더링 방식</strong>: 매 문자마다 전체 마크다운을 재파싱하고 전체 DOM을 교체합니다.</li>\n        <li><strong style=\"color:#1a73e8\">streaming-markdown 방식</strong>: 부분 DOM 패치를 사용하여 변경된 부분만 업데이트합니다.</li>\n      </ul>\n      <p><em>특별히 복잡한 차트, 표, 이미지와 중첩 구조를 포함하여 두 방식의 차이를 명확히 보여줍니다.</em></p>\n    </div>\n    \n    <div class=\"progress-container\">\n      <div class=\"progress-bar\">\n        <div class=\"progress-fill\" :style=\"{ width: `${progress}%` }\"></div>\n      </div>\n      <div class=\"progress-text\">{{ progress }}% 완료</div>\n    </div>\n    \n    <div class=\"controls\">\n      <button @click=\"startStreaming\" :disabled=\"isStreaming\">\n        {{ isStreaming ? '스트리밍 중...' : '스트리밍 시작' }}\n      </button>\n    </div>\n    \n    <div class=\"comparison-container\">\n      <div class=\"rerender-container\">\n        <h2>재파싱·재렌더링 방식</h2>\n        <div class=\"content-box\">\n          <div ref=\"rerenderElement\" class=\"content\"></div>\n        </div>\n        <div class=\"info\">\n          <ul>\n            <li>매 문자마다 전체 마크다운 재파싱</li>\n            <li>DOM 전체 교체</li>\n            <li>텍스트가 길어질수록 성능 저하</li>\n            <li>복잡한 요소에서 깜빡임 명확</li>\n          </ul>\n        </div>\n      </div>\n      \n      <div class=\"streaming-container\">\n        <h2>streaming-markdown 방식</h2>\n        <div class=\"content-box\">\n          <div ref=\"streamingElement\" class=\"content\"></div>\n        </div>\n        <div class=\"info\">\n          <ul>\n            <li>부분적 DOM 패치 적용</li>\n            <li>변경된 부분만 업데이트</li>\n            <li>효율적인 메모리 및 CPU 사용</li>\n            <li>복잡한 요소도 부드럽게 렌더링</li>\n          </ul>\n        </div>\n      </div>\n    </div>\n    \n    <div class=\"raw-markdown\">\n      <h3>원시 마크다운 (현재 스트리밍 진행 상태):</h3>\n      <pre>{{ streamingContent }}</pre>\n    </div>\n  </div>\n</template>\n\n<style scoped>\n.comparison-demo {\n  max-width: 1200px;\n  margin: 0 auto;\n  padding: 20px;\n  font-family: 'Arial', sans-serif;\n}\n\nh1 {\n  text-align: center;\n  color: #333;\n  margin-bottom: 20px;\n  font-size: 24px;\n}\n\nh2 {\n  margin-top: 0;\n  padding: 10px;\n  font-size: 18px;\n  background-color: #f5f5f5;\n  border-radius: 4px 4px 0 0;\n}\n\n.progress-container {\n  margin: 20px 0;\n}\n\n.progress-bar {\n  width: 100%;\n  height: 10px;\n  background-color: #eee;\n  border-radius: 10px;\n  overflow: hidden;\n}\n\n.progress-fill {\n  height: 100%;\n  background-color: #4285f4;\n  transition: width 0.3s ease;\n}\n\n.progress-text {\n  text-align: right;\n  font-size: 14px;\n  color: #666;\n  margin-top: 5px;\n}\n\n.controls {\n  margin-bottom: 20px;\n  text-align: center;\n}\n\nbutton {\n  padding: 8px 16px;\n  background-color: #4285f4;\n  color: white;\n  border: none;\n  border-radius: 4px;\n  cursor: pointer;\n  font-size: 16px;\n  min-width: 150px;\n}\n\nbutton:hover {\n  background-color: #3367d6;\n}\n\nbutton:disabled {\n  background-color: #a9c8fd;\n  cursor: not-allowed;\n}\n\n.comparison-container {\n  display: flex;\n  gap: 20px;\n  margin-bottom: 30px;\n}\n\n.rerender-container,\n.streaming-container {\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  border: 1px solid #ddd;\n  border-radius: 8px;\n  overflow: hidden;\n  box-shadow: 0 2px 5px rgba(0,0,0,0.1);\n}\n\n.content-box {\n  flex: 1;\n  padding: 16px;\n  min-height: 800px; /* 높이 증가 */\n  background-color: #f9f9f9;\n  overflow-y: auto;\n  position: relative;\n}\n\n.content {\n  line-height: 1.6;\n}\n\n/* 향상된 마크다운 요소 스타일링 */\n.content :deep(pre) {\n  background-color: #f1f1f1;\n  padding: 10px;\n  border-radius: 4px;\n  overflow-x: auto;\n  font-size: 14px;\n}\n\n.content :deep(code) {\n  font-family: 'Consolas', 'Monaco', monospace;\n  background-color: #f5f5f5;\n  padding: 2px 4px;\n  border-radius: 3px;\n  font-size: 0.9em;\n}\n\n.content :deep(blockquote) {\n  border-left: 4px solid #ccc;\n  padding-left: 16px;\n  margin-left: 0;\n  color: #666;\n  background-color: #fafafa;\n}\n\n.info {\n  background-color: #f5f5f5;\n  padding: 10px 15px;\n  font-size: 14px;\n}\n\n.info ul {\n  margin: 5px 0;\n  padding-left: 20px;\n}\n\n.info li {\n  margin-bottom: 5px;\n}\n\n.rerender-container {\n  border-color: #d32f2f;\n}\n\n.rerender-container .info {\n  background-color: #feeded;\n}\n\n.rerender-container h2 {\n  background-color: #ffcccc;\n  color: #d32f2f;\n}\n\n.streaming-container {\n  border-color: #1a73e8;\n}\n\n.streaming-container .info {\n  background-color: #e8f0fe;\n}\n\n.streaming-container h2 {\n  background-color: #cce0ff;\n  color: #1a73e8;\n}\n\n/* 표 스타일 개선 */\n.content :deep(table) {\n  border-collapse: collapse;\n  width: 100%;\n  margin: 15px 0;\n  border: 1px solid #ddd;\n}\n\n.content :deep(th), \n.content :deep(td) {\n  padding: 8px 12px;\n  border: 1px solid #ddd;\n  text-align: left;\n}\n\n.content :deep(th) {\n  background-color: #f0f0f0;\n  font-weight: bold;\n}\n\n.content :deep(tr:nth-child(even)) {\n  background-color: #f9f9f9;\n}\n\n/* 이미지 스타일 */\n.content :deep(img) {\n  max-width: 100%;\n  height: auto;\n  border-radius: 4px;\n  border: 1px solid #ddd;\n  box-shadow: 0 2px 4px rgba(0,0,0,0.1);\n  margin: 10px 0;\n  display: block;\n}\n\n/* 관찰 포인트 스타일 */\n.observation-points {\n  background-color: #fff8e1;\n  border: 1px solid #ffe082;\n  border-radius: 8px;\n  padding: 15px;\n  margin: 20px 0;\n}\n\n.observation-points h3 {\n  margin-top: 0;\n  color: #f57f17;\n}\n\n.observation-points ol {\n  margin: 10px 0 5px 25px;\n  padding: 0;\n}\n\n.observation-points li {\n  margin-bottom: 8px;\n  line-height: 1.4;\n}\n\n/* 설명 섹션 스타일 개선 */\n.explanation {\n  background-color: #f8f9fa;\n  border: 1px solid #e1e4e8;\n  border-radius: 6px;\n  padding: 15px;\n  margin-bottom: 20px;\n  font-size: 15px;\n  line-height: 1.5;\n}\n\n.explanation ul {\n  margin: 10px 0 5px 20px;\n  padding: 0;\n}\n\n.explanation li {\n  margin-bottom: 5px;\n}\n\n.raw-markdown {\n  margin-top: 30px;\n  border-top: 1px solid #eee;\n  padding-top: 20px;\n}\n\n.raw-markdown pre {\n  background-color: #f1f1f1;\n  padding: 10px;\n  border-radius: 4px;\n  overflow-x: auto;\n  font-family: monospace;\n  white-space: pre-wrap;\n  font-size: 14px;\n  max-height: 200px;\n  overflow-y: auto;\n}\n\n/* 헤더 강조 스타일 */\n.content :deep(h1), \n.content :deep(h2), \n.content :deep(h3), \n.content :deep(h4), \n.content :deep(h5) {\n  margin-top: 25px;\n  margin-bottom: 15px;\n  color: #333;\n  border-bottom: 1px solid #eee;\n  padding-bottom: 5px;\n}\n\n.content :deep(h1) {\n  font-size: 24px;\n}\n\n.content :deep(h2) {\n  font-size: 22px;\n}\n\n.content :deep(h3) {\n  font-size: 20px;\n}\n\n.content :deep(h4) {\n  font-size: 18px;\n}\n\n/* 링크 스타일 */\n.content :deep(a) {\n  color: #1a73e8;\n  text-decoration: none;\n}\n\n.content :deep(a:hover) {\n  text-decoration: underline;\n}\n</style>","import script from \"./StreamChat.vue?vue&type=script&setup=true&lang=js\"\nexport * from \"./StreamChat.vue?vue&type=script&setup=true&lang=js\"\n\nimport \"./StreamChat.vue?vue&type=style&index=0&id=f88c2512&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-f88c2512\"]])\n\nexport default __exports__","import { render } from \"./App.vue?vue&type=template&id=3426736d\"\nimport script from \"./App.vue?vue&type=script&lang=js\"\nexport * from \"./App.vue?vue&type=script&lang=js\"\n\nimport \"./App.vue?vue&type=style&index=0&id=3426736d&lang=css\"\n\nimport exportComponent from \"../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['render',render]])\n\nexport default __exports__","import { createApp } from 'vue'\nimport App from './App.vue'\n\ncreateApp(App).mount('#app')\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n","var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// no baseURI\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t524: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunkstream_test\"] = self[\"webpackChunkstream_test\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// startup\n// Load entry module and return exports\n// This entry module depends on other loaded chunks and execution need to be delayed\nvar __webpack_exports__ = __webpack_require__.O(undefined, [504], function() { return __webpack_require__(891); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["_createBlock","_component_StreamChat","simulatedLLMResponse","streamingContent","ref","rerenderElement","streamingElement","isStreaming","progress","streamInterval","parser","initializeParser","value","renderer","smd","startStreaming","clearInterval","innerHTML","characters","split","totalChars","length","currentIndex","setInterval","char","marked","parse","Math","floor","console","log","onMounted","onUnmounted","__exports__","name","components","StreamChat","render","createApp","App","mount","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","exports","module","__webpack_modules__","m","deferred","O","result","chunkIds","fn","priority","notFulfilled","Infinity","i","fulfilled","j","Object","keys","every","key","splice","r","d","definition","o","defineProperty","enumerable","get","g","globalThis","this","Function","e","window","obj","prop","prototype","hasOwnProperty","call","installedChunks","chunkId","webpackJsonpCallback","parentChunkLoadingFunction","data","moreModules","runtime","some","id","chunkLoadingGlobal","self","forEach","bind","push","__webpack_exports__"],"sourceRoot":""}